{"version":3,"file":"client.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxjWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA","sources":["webpack://camunda-modeler-bpmn-best-practice-example/./client/bpmn-js-extension/ExampleBpmnJsExtension.js","webpack://camunda-modeler-bpmn-best-practice-example/./client/bpmn-js-extension/index.js","webpack://camunda-modeler-bpmn-best-practice-example/./client/core/state/SchemeState.js","webpack://camunda-modeler-bpmn-best-practice-example/./client/linter/LinterResponse.js","webpack://camunda-modeler-bpmn-best-practice-example/./client/linter/linter.js","webpack://camunda-modeler-bpmn-best-practice-example/./client/linter/linterMessages.js","webpack://camunda-modeler-bpmn-best-practice-example/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-bpmn-best-practice-example/webpack/bootstrap","webpack://camunda-modeler-bpmn-best-practice-example/webpack/runtime/define property getters","webpack://camunda-modeler-bpmn-best-practice-example/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-bpmn-best-practice-example/webpack/runtime/make namespace object","webpack://camunda-modeler-bpmn-best-practice-example/./client/index.js"],"sourcesContent":["import SchemeState from \"../core/state/SchemeState\";\n\nexport default function ExampleBpmnJsExtension(eventBus) {\n  eventBus.on('shape.added', function(context) {\n    var element = context.element;\n    SchemeState.addState(element);\n  });\n\n  eventBus.on('shape.removed', function(context) {\n    var element = context.element;\n    SchemeState.removeState(element);\n  });\n\n  eventBus.on('connection.added', function(context) {\n    var element = context.element;\n  });\n\n  eventBus.on('connection.removed', function(context) {\n    var element = context.element;\n    SchemeState.removeState(element);\n  });\n}\n\n//todo: check cross domain localstorage\n\nExampleBpmnJsExtension.$inject = [\n  'eventBus'\n];","import ExampleBpmnJsExtension from './ExampleBpmnJsExtension';\n\n/**\n * A bpmn-js module, defining all extension services and their dependencies.\n *\n * --------\n *\n * WARNING: This is an example only.\n *\n * Make sure you choose a unique name under which your extension service\n * is exposed (i.e. change PLEASE_CHANGE_ME to something unique).\n *\n * --------\n *\n */\nexport default {\n  __init__: [ 'PLEASE_CHANGE_ME' ],\n  PLEASE_CHANGE_ME: ['type', ExampleBpmnJsExtension ]\n};\n","import lintElementsAndSaveToLocalStorage from \"./../../linter/linter\"\n\nexport default class SchemeState {\n    static #state = []\n\n    static addState(newState) {\n        this.#state.push(newState)\n        lintElementsAndSaveToLocalStorage(this.#state)\n    }\n\n    static removeState(old) {\n        this.#state = this.#state.filter(e => e !== old)\n        lintElementsAndSaveToLocalStorage(this.#state)\n    }\n}","export default class LinterResponse {\n    bpmnElementId;\n    isOk;\n    message;\n\n    constructor(bpmnElementId, isOk, message = null) {\n        this.bpmnElementId = bpmnElementId;\n        this.isOk = isOk;\n        this.message = message;\n    }\n}","import LinterResponse from './LinterResponse'\nimport LinterMessages from './linterMessages'\n\nexport default function lintElementsAndSaveToLocalStorage(elements) {\n    let result = elements.map(element => lint(element))\n        .flat()\n        .filter(e => e!=[])\n    localStorage.setItem('linter-state', JSON.stringify(result));\n    return result\n}\n\nfunction lint(element) {\n    return linters\n        .map(linterData => \n            lintByPredicate(\n                element, \n                linterData.predicate, \n                linterData.message\n            )\n        )\n        .filter(e => !e.isOk)\n}\n\nconst linters = [\n    {\n        predicate: (element)=> {\n            let bpmnElement = element.di.bpmnElement\n            return element.type === \"bpmn:ScriptTask\" && bpmnElement.scriptFormat === \"Java Script\"\n        },\n        message: LinterMessages.JS\n    },\n    {\n        predicate: (element)=> {\n            let bpmnElement = element.di.bpmnElement\n            return element.type === \"bpmn:ServiceTask\" && (bpmnElement.class !== undefined || bpmnElement.delegateExpression)\n        },\n        message: LinterMessages.DELEGATES\n    },\n    {\n        predicate: (element)=> {\n            let bpmnElement = element.di.bpmnElement\n\n            return element.type === \"bpmn:UserTask\" && bpmnElement.formRef !== undefined && bpmnElement.formRef.includes(\".html\")\n        },\n        message: LinterMessages.HTML\n    }\n]\n\nfunction lintByPredicate(element, linterPredicateIsNotOk, message) {\n    let isOk = true\n    if (linterPredicateIsNotOk(element)) isOk = false\n    return new LinterResponse(\n        element.id,\n        isOk,\n        isOk === true ? null : message\n    )\n}","export default class LinterMessages {\n    static JS = \"не нада js\"\n    static DELEGATES = \"не нада delegates\"\n    static HTML = \"не нада html\"\n}","/**\n * Validate and register a client plugin.\n *\n * @param {Object} plugin\n * @param {String} type\n */\nexport function registerClientPlugin(plugin, type) {\n  var plugins = window.plugins || [];\n  window.plugins = plugins;\n\n  if (!plugin) {\n    throw new Error('plugin not specified');\n  }\n\n  if (!type) {\n    throw new Error('type not specified');\n  }\n\n  plugins.push({\n    plugin: plugin,\n    type: type\n  });\n}\n\n/**\n * Validate and register a client plugin.\n *\n * @param {import('react').ComponentType} extension\n *\n * @example\n *\n * import MyExtensionComponent from './MyExtensionComponent';\n *\n * registerClientExtension(MyExtensionComponent);\n */\nexport function registerClientExtension(component) {\n  registerClientPlugin(component, 'client');\n}\n\n/**\n * Validate and register a bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\n}\n\n/**\n * Validate and register a platform specific bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerPlatformBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerPlatformBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerPlatformBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.platform.modeler.additionalModules');\n}\n\n/**\n * Validate and register a cloud specific bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerCloudBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerCloudBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerCloudBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.cloud.modeler.additionalModules');\n}\n\n/**\n * Validate and register a bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a platform specific bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerPlatformBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerPlatformBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerPlatformBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.platform.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a cloud specific bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerCloudBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerCloudBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerCloudBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.cloud.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a dmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerDmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerDmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerDmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a cloud specific dmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerCloudDmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerCloudDmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerCloudDmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'dmn.cloud.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a platform specific dmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerPlatformDmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerPlatformDmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerPlatformDmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'dmn.platform.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a dmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerDmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const DmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\n * registerDmnJSPlugin(DmnJSModule, 'drd')\n */\nexport function registerDmnJSPlugin(module, components) {\n\n  if (!Array.isArray(components)) {\n    components = [ components ]\n  }\n\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`));\n}\n\n/**\n * Validate and register a cloud specific dmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerCloudDmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const DmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerCloudDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\n * registerCloudDmnJSPlugin(DmnJSModule, 'drd')\n */\nexport function registerCloudDmnJSPlugin(module, components) {\n\n  if (!Array.isArray(components)) {\n    components = [ components ]\n  }\n\n  components.forEach(c => registerClientPlugin(module, `dmn.cloud.modeler.${c}.additionalModules`));\n}\n\n/**\n * Validate and register a platform specific dmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerPlatformDmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const DmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerPlatformDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\n * registerPlatformDmnJSPlugin(DmnJSModule, 'drd')\n */\nexport function registerPlatformDmnJSPlugin(module, components) {\n\n  if (!Array.isArray(components)) {\n    components = [ components ]\n  }\n\n  components.forEach(c => registerClientPlugin(module, `dmn.platform.modeler.${c}.additionalModules`));\n}\n\n/**\n * Return the modeler directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getModelerDirectory() {\n  return window.getModelerDirectory();\n}\n\n/**\n * Return the modeler plugin directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getPluginsDirectory() {\n  return window.getPluginsDirectory();\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** \n * NOTE: This is specifically a registration of a **bpmn-js** extension. If you would like to create another type of plugin \n * (say a client extension), the structure of the plugin and the function to register it will be slightly different.\n * \n * Please refer to:\n * Examples plugins - https://github.com/camunda/camunda-modeler-plugins\n * Plugin documentation - https://docs.camunda.io/docs/components/modeler/desktop-modeler/plugins/\n */\n\nimport {\n  registerBpmnJSPlugin\n} from 'camunda-modeler-plugin-helpers';\n\nimport ExampleBpmnJsExtension from './bpmn-js-extension';\n\nregisterBpmnJSPlugin(ExampleBpmnJsExtension);\n"],"names":[],"sourceRoot":""}